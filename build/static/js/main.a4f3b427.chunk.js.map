{"version":3,"sources":["components/header/index.js","components/canvas/index.js","components/viewer/index.js","components/viewer/renderPredictions.js","App.js","serviceWorker.js","index.js"],"names":["Header","count","Canvas","nextProps","nextState","nextContext","this","props","canvasRef","width","height","console","log","ref","id","Component","Viewer","videoRef","React","createRef","useState","setCount","useEffect","navigator","mediaDevices","getUserMedia","webCamPromise","audio","video","facingMode","then","stream","window","current","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","detectFrame","catch","error","model","detect","predictions","personPrediction","mapPerson","length","canvas","ctx","getContext","clearRect","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","renderPredictions","requestAnimationFrame","filter","item","windowWidth","innerWidth","styles","className","style","autoPlay","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4f3b427.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = ({count}) => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<p>find people: <b>{count}</b></p>\r\n\t\t</header>\r\n\t)\r\n}","import React, {Component} from 'react'\r\n\r\nexport class Canvas extends Component {\r\n\tshouldComponentUpdate (nextProps, nextState, nextContext) {\r\n\t\treturn false\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {canvasRef, width, height} = this.props;\r\n\t\tconsole.log('canvas update')\r\n\t\treturn (\r\n\t\t\t<canvas ref={canvasRef} id=\"canvas\" width={width} height={height}> </canvas>\r\n\t\t)\r\n\t}\r\n}","import React, { useEffect, useState } from 'react'\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd'\r\n// import * as Stats from 'stats.js'\r\nimport { Header } from '../header'\r\nimport { Canvas } from '../canvas'\r\nimport {renderPredictions} from './renderPredictions'\r\n\r\nexport const Viewer = () => {\r\n\tconst videoRef = React.createRef();\r\n\tconst canvasRef = React.createRef();\r\n\tconst viewerRef = React.createRef();\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\t\t\tconst webCamPromise = navigator.mediaDevices\r\n\t\t\t\t.getUserMedia({\r\n\t\t\t\t\taudio: false,\r\n\t\t\t\t\tvideo: { facingMode: \"environment\" }\r\n\t\t\t\t})\r\n\t\t\t\t.then(stream => {\r\n\t\t\t\t\twindow.stream = stream;\r\n\t\t\t\t\tvideoRef.current.srcObject = stream;\r\n\t\t\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tvideoRef.current.onloadedmetadata = () => {\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\tconst modelPromise = cocoSsd.load();\r\n\r\n\t\t\tPromise.all([modelPromise, webCamPromise])\r\n\t\t\t\t.then(values => {\r\n\r\n\t\t\t\t\tdetectFrame(videoRef.current, values[0]);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => {\r\n\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst detectFrame = (video, model) => {\r\n\r\n\t\tmodel.detect(video).then(predictions => {\r\n\t\t\tconst personPrediction = mapPerson(predictions)\r\n\r\n\t\t\tsetCount(personPrediction.length)\r\n\t\t\tif (canvasRef.current) {\r\n\t\t\t\trenderPredictions(personPrediction, canvasRef);\r\n\t\t\t}\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\tdetectFrame(video, model);\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t};\r\n\r\n\tconst mapPerson = prediction =>  prediction.filter(item => item.class === 'person')\r\n\r\n\tconst windowWidth = () => window.innerWidth - 20\r\n\r\n\tconst styles = {width: windowWidth()}\r\n\r\n\treturn (\r\n\t\t<div className=\"container-fluid\">\r\n\t\t\t<Header count={count}/>\r\n\t\t\t<div className=\"viewer\" style={styles}>\r\n\t\t\t\t<video ref={videoRef} id=\"video\" width={windowWidth()} height=\"700\" autoPlay> </video>\r\n\t\t\t\t<Canvas canvasRef={canvasRef} width={windowWidth()} height=\"700\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","export const renderPredictions = (predictions, canvas)=> {\r\n\tconst ctx = canvas.current.getContext(\"2d\");\r\n\tctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n\tconst font = \"16px sans-serif\";\r\n\tctx.font = font;\r\n\tctx.textBaseline = \"top\";\r\n\tpredictions.forEach(prediction => {\r\n\t\tconst x = prediction.bbox[0];\r\n\t\tconst y = prediction.bbox[1];\r\n\t\tconst width = prediction.bbox[2];\r\n\t\tconst height = prediction.bbox[3];\r\n\t\t// Draw the bounding box.\r\n\t\tctx.strokeStyle = \"#00FFFF\";\r\n\t\tctx.lineWidth = 4;\r\n\t\tctx.strokeRect(x, y, width, height);\r\n\t\t// Draw the label background.\r\n\t\tctx.fillStyle = \"#00FFFF\";\r\n\t\tconst textWidth = ctx.measureText(prediction.class).width;\r\n\t\tconst textHeight = parseInt(font, 10); // base 10\r\n\t\tctx.fillRect(x, y, textWidth + 4, textHeight + 4);\r\n\t});\r\n\r\n\tpredictions.forEach(prediction => {\r\n\t\tconst x = prediction.bbox[0];\r\n\t\tconst y = prediction.bbox[1];\r\n\t\t// Draw the text last to ensure it's on top.\r\n\t\tctx.fillStyle = \"#000000\";\r\n\t\tctx.fillText(prediction.class, x, y);\r\n\t});\r\n};\r\n","import React from 'react';\nimport {Viewer} from './components/viewer'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Viewer/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}